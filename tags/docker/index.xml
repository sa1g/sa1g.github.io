<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Ettore Saggiorato - Sa1g</title><link>https://sa1g.github.io/tags/docker/</link><description>Recent content in Docker on Ettore Saggiorato - Sa1g</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 13 Jun 2025 01:00:00 +0000</lastBuildDate><atom:link href="https://sa1g.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Automated Planning</title><link>https://sa1g.github.io/p/automated-planning/</link><pubDate>Fri, 13 Jun 2025 01:00:00 +0000</pubDate><guid>https://sa1g.github.io/p/automated-planning/</guid><description>&lt;p>&lt;a class="link" href="https://github.com/sa1g/automated-planning" target="_blank" rel="noopener"
>Project Repo&lt;/a>&lt;/p>
&lt;p>This project investigates the modeling of planning problems using PDDL and HDDL, with planner execution facilitated through planutils &lt;a class="link" href="https://github.com/AI-Planning/planutils" target="_blank" rel="noopener"
>[1]&lt;/a> and Panda &lt;a class="link" href="https://doi.org/10.1007/s13218-020-00699-y" target="_blank" rel="noopener"
>[2]&lt;/a>. The implementation progresses from foundational classical planning to temporal planning, culminating in robotic system integration via PlanSys2 &lt;a class="link" href="https://arxiv.org/abs/2107.00376" target="_blank" rel="noopener"
>[3]&lt;/a>. Key challenges addressed include the modeling of limited resources, multi agent coordination, and compatibility with robotic execution frameworks.&lt;/p>
&lt;p>More info in the report:&lt;/p>
&lt;p align="center">
&lt;a href="https://github.com/sa1g/automated-planning/blob/main/report/report.pdf">&lt;img src="https://raw.githubusercontent.com/sa1g/automated-planning/refs/heads/main/report/report.png" width="250"/>&lt;/a>
&lt;/p>
&lt;p align="center">
Click to download report
&lt;/p></description></item><item><title>Autonomous Software Agents</title><link>https://sa1g.github.io/p/asa/</link><pubDate>Tue, 21 Jan 2025 01:00:00 +0000</pubDate><guid>https://sa1g.github.io/p/asa/</guid><description>&lt;p>&lt;a class="link" href="https://github.com/sa1g/autonomous-software-agents" target="_blank" rel="noopener"
>Project Repo&lt;/a>&lt;/p>
&lt;p>Made in collaboration with &lt;a class="link" href="https://github.com/bertogb23" target="_blank" rel="noopener"
>Gianluca&lt;/a>.&lt;/p>
&lt;p>The project is about creating a multi-agent system that can navigate in a simulated environment, using the &lt;a class="link" href="https://github.com/unitn-ASA/Deliveroo.js.git" target="_blank" rel="noopener"
>Deliveroo.js&lt;/a> framework. The agents are designed to work together to achieve their goals, and they use PDDL (&lt;a class="link" href="https://github.com/AI-Planning/planutils" target="_blank" rel="noopener"
>planutils&lt;/a>) for planning their actions.&lt;/p>
&lt;p>Agents can both be run in a single agent mode or in a multi-agent mode. In the multi-agent mode, agents work together to achieve their goals, and they can communicate with each other to coordinate their actions. The cooperative implementaton tries to find a plan that is optimal for the team, while blocking the best path for adversaries. This solution in kind of yielding, where the agents are willing to sacrifice their own performance for the sake of the team.&lt;/p>
&lt;p align="center">
&lt;img src="24c1_2.png" width="500"/>&lt;/a>
&lt;/p>
&lt;p align="center">
Example of map analysis. Green is the map. Orange (darker) representsthe best positions to visualize the spawning of new parcels. Blue (darker) represent the most traveled paths.
&lt;/p>
&lt;p>To have a better understanding of the maps, static analysis are performed to extract the statically most traveled paths. This information is used to create a heuristic that guides the agents in their planning process. The heuristic is based on the idea that the agents should avoid the most traveled paths, as they are likely to be more congested and less efficient. Also these paths are the ones that adversaries will use to reach their goal and are the ones that we want to block.&lt;/p>
&lt;p>As the plans are generated by the PDDL server, to improve the performance of the agents, we implemented a caching system that stores the plans generated by the PDDL server. This allows the agents to reuse previously generated plans, which can significantly reduce the time required to generate new plans. Also a loadbalancing system is implemented to distribute the load of the PDDL server across multiple instances. This allows the agents to generate plans more quickly (lower response times) and efficiently, as they can take advantage of the available resources.&lt;/p>
&lt;p>&lt;strong>Known issues&lt;/strong>: there is a syncronization bug between agent and the deliveroo server. Sometimes commands are not responded by the server, probably due to a limitation of the server itself.&lt;/p>
&lt;p align="center">
&lt;a href="https://github.com/sa1g/autonomous-software-agents/blob/main/presentation.pdf">&lt;img src="presentation.png" width="250"/>&lt;/a>
&lt;/p>
&lt;p align="center">
Click to download slides
&lt;/p></description></item></channel></rss>