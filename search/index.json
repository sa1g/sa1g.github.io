[{"content":"Project Repo\nThis project investigates the modeling of planning problems using PDDL and HDDL, with planner execution facilitated through planutils [1] and Panda [2]. The implementation progresses from foundational classical planning to temporal planning, culminating in robotic system integration via PlanSys2 [3]. Key challenges addressed include the modeling of limited resources, multi agent coordination, and compatibility with robotic execution frameworks.\nMore info in the report:\nClick to download report ","date":"2025-06-13T01:00:00Z","permalink":"https://sa1g.github.io/p/automated-planning/","title":"Automated Planning"},{"content":"Project Repo\nMade in collaboration with Emanuele\nThis is not strictly a project, but rather a case study on how MobileCLIP was developed, focusing on understanding the architecture, training and dataset creation, and the overall process of building a lightweight CLIP model for mobile devices. Possible improvements were proposed.\nClick to download presentation Training TinyCLIP distillation of MobileCLIP Reduce the model parameter number, while keeping most of the original accuracy using TinyCLIP. Improving synthetic captions Regenerate captions if they are too similar in the reinforced dataset. Sigmoid self-attention Substitute softmax with sigmoid self-attention in the self-attention layers. Inference PuMer adaptation to MobileCLIP PuMer adopts token pruning (TIP) and merging (MAM) in ViLT architecture to improve latency without compromising model performance. MobileCLIP differs from ViLT from a structural perspective, but modality aware merging (MAM) still could lead to small latency improvements. Token Ranking Pruning Patch Ranking original purpose was to prune image patches in tranformer based CLIP models through a predictor to reduce the number of tokens processed through the image and text encoder. Adapting this technique to the MobileCLIP text encoder could result in similar improvements to the paper implementation. Dynamic Input Resolution Adjust input resolution on a per-sample basis: low-resolution inference for simpler images, high-resolution for more complex ones. ","date":"2025-02-20T01:00:00Z","permalink":"https://sa1g.github.io/p/acv/","title":"Advanced Computer Vision - MobileCLIP"},{"content":"Project Repo\nMade in collaboration with Davide, Lorenzo and Laurence.\nEvoMusic is an adaptive music generation system designed to evolve music in alignment with user preferences. By analyzing user interactions, it continuously refines its understanding of musical tastes and generates personalized compositions.\nAt its core, EvoMusic combines a music scoring mechanism, user feedback modeling, conditional music generation, and evolutionary strategies. The system follows a loop where it evolves music based on inferred preferences, generates a playlist, collects feedback, and fine-tunes its understanding of user tastes. This iterative process ensures that the music adapts dynamically to each user.\nClick to download report\nClick to download slides\n","date":"2025-02-09T01:00:00Z","permalink":"https://sa1g.github.io/p/evo-music/","title":"EvoMusic"},{"content":"Project Repo\nThese assignments are about learning the basics of GPU programming using CUDA. In all assignment we benchmark non-symmetric matrices of size $N \\times N$, where $N$ is a power of 2, with different kernels and block sizes.\nClick to download report First Assignment Develop a few algorithms to transpose the matrix in CPU, measure effective bandwidth under different compiler optimizations (-O0, -O1, -O2, -O3), analyze cache behavior and efficiency.\nSecond Assignment Develop a few algorithms to transpose the matrix in GPU, measure effective bandwidth and efficiency. The developed algorithms are:\nsimple transposition with shared memory with shared memory and coalesced memory access Results were also compared with the Copy of the matrix in GPU, to compare to the simplest algorithm we could use.\nThird Assignment Develop some algorithms to transpose the matrix in GPU, using NVIDIA\u0026rsquo;s Cooperative Groups. Compare the results against cuBLAS. This wasn\u0026rsquo;t straightforward as Cooperative Groups are not a good idea for dense matrix transposition, so I had to work against all the things that were studied during the course. Three algorithms were developed (ignoring copy):\nIntra-block synchronization (good old __syncthreads()) Intra-block synchronization coalesced Inter-block synchronization (grid-wide synch, expected and demonstrated slower) ","date":"2025-02-01T01:00:00Z","permalink":"https://sa1g.github.io/p/gpu-computing/","title":"GPU Computing"},{"content":"Project Repo\nMade in collaboration with Gianluca.\nThe project is about creating a multi-agent system that can navigate in a simulated environment, using the Deliveroo.js framework. The agents are designed to work together to achieve their goals, and they use PDDL (planutils) for planning their actions.\nAgents can both be run in a single agent mode or in a multi-agent mode. In the multi-agent mode, agents work together to achieve their goals, and they can communicate with each other to coordinate their actions. The cooperative implementaton tries to find a plan that is optimal for the team, while blocking the best path for adversaries. This solution in kind of yielding, where the agents are willing to sacrifice their own performance for the sake of the team.\nExample of map analysis. Green is the map. Orange (darker) representsthe best positions to visualize the spawning of new parcels. Blue (darker) represent the most traveled paths. To have a better understanding of the maps, static analysis are performed to extract the statically most traveled paths. This information is used to create a heuristic that guides the agents in their planning process. The heuristic is based on the idea that the agents should avoid the most traveled paths, as they are likely to be more congested and less efficient. Also these paths are the ones that adversaries will use to reach their goal and are the ones that we want to block.\nAs the plans are generated by the PDDL server, to improve the performance of the agents, we implemented a caching system that stores the plans generated by the PDDL server. This allows the agents to reuse previously generated plans, which can significantly reduce the time required to generate new plans. Also a loadbalancing system is implemented to distribute the load of the PDDL server across multiple instances. This allows the agents to generate plans more quickly (lower response times) and efficiently, as they can take advantage of the available resources.\nKnown issues: there is a syncronization bug between agent and the deliveroo server. Sometimes commands are not responded by the server, probably due to a limitation of the server itself.\nClick to download slides ","date":"2025-01-21T01:00:00Z","permalink":"https://sa1g.github.io/p/asa/","title":"Autonomous Software Agents"},{"content":"Project Link\nThis project, developed for the course of Signal, Image and Video focuses on verifying the possiblity to estimate the size of kiwi-fruits from 2D images taken directly on the field, using Machine Learning as little as possible (\u0026ldquo;only\u0026rdquo; for getting the masks). The application of this software could be beneficial for farmers that want to measure the performances of their land, this is just the prototype of what it could be possible to do, such as visualize the production quality identifying plant lines, orchards and, if the software is used by many farmers it could be useful to improve quality, production quantity and research about those.\nMore infos in the Report.\nClick to download report\nClick to download slides\nThis project was fun. â€” E\nFuture Works This project could be improved a lot and sent to production (it wasn\u0026rsquo;t a goal for the exam, so I didn\u0026rsquo;t focus on it), some of the improvements could be:\nUse a better (faster, lighter) model for the masks Get more data (and augmentation) Model the size estimator instead of making everything by hand Model the fruit filtering that removes the fruits that are not in the correct position for measurement - here it could be interesting to see if it\u0026rsquo;s possible to model it so that it can estimate the size of the fruit even if it\u0026rsquo;s not in the correct position..pretty hard to do tho. ","date":"2024-02-14T01:00:00Z","permalink":"https://sa1g.github.io/p/kiwi-recon/","title":"Kiwi Recon"},{"content":"Project Repo\nThe idea of this project is to train multiple agents in the AI Economist using PPO v1 and Decision Trees with Q-Learning concurrently, to have a fast way to verify the capabilities of the DT in a complex, competitive, scenario. As no existing framework supports batch and online training algos concurrently, I implemented this basic framework.\nThe issue that different algorithms may have different training speeds is not addressed in this project, developments in this direction are welcome. Currently all algos get the same amount of data. Online algorithms are trained in an online fashion, after each batch of data is collected, and before updating the agents of the batch algorithms.\nTo make this project run faster, data gatering is distributed across multiple processes (fork), and the training is done in a single process. As the project was developed before I learnt about mpi and tensorboard, it does not use them, and much stuff is hardcoded. A full rewrite could be interesting, also to add the missing feature said above. At the time I tried to use ray to distribute the training, but I wasn\u0026rsquo;t able to make it work, so I wrote everything from scratch. The code is not very clean, but it works.\nTraining scheme for the multi-algorithm training management:\n","date":"2023-06-11T01:00:00Z","permalink":"https://sa1g.github.io/p/map-rl/","title":"Multi-Agent Policy RL - AI Economist"}]